//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/prefabs/PlayerControlls/New Controls 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls1 : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls 1"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""14732573-e194-418a-b7e3-1c7e45d31717"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""40306749-3327-4ed9-8e9d-4f9ad37068e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FIRE"",
                    ""type"": ""Button"",
                    ""id"": ""7b0a763f-927c-4233-9c06-cf9cda241264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JUMP"",
                    ""type"": ""Button"",
                    ""id"": ""2ee8a9a7-8b50-4e48-9662-35c8accfcbc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GRAB"",
                    ""type"": ""Button"",
                    ""id"": ""9338ea3f-b407-46d1-b406-8520fccce42d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HIT"",
                    ""type"": ""Button"",
                    ""id"": ""3632770a-3130-4906-a6d5-08403331513d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52a2e356-4a00-48e0-86a1-7909db651d19"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac5f6c80-3175-4954-acd4-79bc352b5407"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FIRE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b4d341c-1960-48a9-ac22-bf528d9797d4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FIRE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c705d77-0da6-42a4-b3c8-e41d5c600b7d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61f37531-7896-437f-bc25-b15c34edf43c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10432230-46ce-4a01-a8ce-b891eba7483c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GRAB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90cd67ec-3c44-4f83-a770-c84d24eb9155"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GRAB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af2cf896-8a35-4d42-b1b2-634ded94e581"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HIT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9014481-5ce0-4a58-bd7f-f3d4cd423626"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HIT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""db7f0c1a-baeb-44d9-83d9-9f6258b95a40"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""deb6dc46-8b9c-4fbc-be4f-0ff444532137"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d9b91196-8881-4953-8dc3-92610060f5ae"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""05a609aa-4535-4d55-a508-ef4763323bb6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""259058a3-ed9c-42db-bf37-aaab82b18543"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""COnfig"",
            ""id"": ""9f9209a0-8082-4f69-b343-a120adb001cc"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""296ab78c-c1e8-44ee-90da-4ed8ffa559c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd30783f-2d91-42c9-92cd-b4bc124abc9e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""977be799-df36-4b1e-b6ee-d02bfabc9b44"",
                    ""path"": ""<DualShockGamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_FIRE = m_Gameplay.FindAction("FIRE", throwIfNotFound: true);
        m_Gameplay_JUMP = m_Gameplay.FindAction("JUMP", throwIfNotFound: true);
        m_Gameplay_GRAB = m_Gameplay.FindAction("GRAB", throwIfNotFound: true);
        m_Gameplay_HIT = m_Gameplay.FindAction("HIT", throwIfNotFound: true);
        // COnfig
        m_COnfig = asset.FindActionMap("COnfig", throwIfNotFound: true);
        m_COnfig_Pause = m_COnfig.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_FIRE;
    private readonly InputAction m_Gameplay_JUMP;
    private readonly InputAction m_Gameplay_GRAB;
    private readonly InputAction m_Gameplay_HIT;
    public struct GameplayActions
    {
        private @NewControls1 m_Wrapper;
        public GameplayActions(@NewControls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @FIRE => m_Wrapper.m_Gameplay_FIRE;
        public InputAction @JUMP => m_Wrapper.m_Gameplay_JUMP;
        public InputAction @GRAB => m_Wrapper.m_Gameplay_GRAB;
        public InputAction @HIT => m_Wrapper.m_Gameplay_HIT;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @FIRE.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFIRE;
                @FIRE.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFIRE;
                @FIRE.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnFIRE;
                @JUMP.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJUMP;
                @JUMP.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJUMP;
                @JUMP.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnJUMP;
                @GRAB.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGRAB;
                @GRAB.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGRAB;
                @GRAB.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGRAB;
                @HIT.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHIT;
                @HIT.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHIT;
                @HIT.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHIT;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @FIRE.started += instance.OnFIRE;
                @FIRE.performed += instance.OnFIRE;
                @FIRE.canceled += instance.OnFIRE;
                @JUMP.started += instance.OnJUMP;
                @JUMP.performed += instance.OnJUMP;
                @JUMP.canceled += instance.OnJUMP;
                @GRAB.started += instance.OnGRAB;
                @GRAB.performed += instance.OnGRAB;
                @GRAB.canceled += instance.OnGRAB;
                @HIT.started += instance.OnHIT;
                @HIT.performed += instance.OnHIT;
                @HIT.canceled += instance.OnHIT;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // COnfig
    private readonly InputActionMap m_COnfig;
    private ICOnfigActions m_COnfigActionsCallbackInterface;
    private readonly InputAction m_COnfig_Pause;
    public struct COnfigActions
    {
        private @NewControls1 m_Wrapper;
        public COnfigActions(@NewControls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_COnfig_Pause;
        public InputActionMap Get() { return m_Wrapper.m_COnfig; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(COnfigActions set) { return set.Get(); }
        public void SetCallbacks(ICOnfigActions instance)
        {
            if (m_Wrapper.m_COnfigActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_COnfigActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_COnfigActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_COnfigActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_COnfigActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public COnfigActions @COnfig => new COnfigActions(this);
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFIRE(InputAction.CallbackContext context);
        void OnJUMP(InputAction.CallbackContext context);
        void OnGRAB(InputAction.CallbackContext context);
        void OnHIT(InputAction.CallbackContext context);
    }
    public interface ICOnfigActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
